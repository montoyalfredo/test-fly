# This is a basic workflow to help you get started with Actions

name: test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

jobs:

  deployment:
    runs-on: ubuntu-latest
    environment: ecr    
    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Execute Gradle build
        run: ./gradlew build sonar 
          -Dsonar.organization=crisnen10 
          -Dsonar.projectKey=crisnen10_test-fly 
          -Dsonar.login=fbe3bb67032ec47d2e028f1f8fba1ae901986a24


      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 300
        env:
         SONAR_TOKEN: fbe3bb67032ec47d2e028f1f8fba1ae901986a24
        with:
          scanMetadataReportFile: build/sonar/report-task.txt

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: $GITHUB_ACTION_REPOSITORY
          
#      - name: Login to Amazon ECR Public
#        id: login-ecr-public
#        uses: aws-actions/amazon-ecr-login@v1
#        with:
#          registry-type: public

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.10.0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
        #- name: Login to Docker Hub
        #uses: docker/login-action@v2
        #with:
        #  username: AWS
        #  password: ${{ secrets.ECRPASSWORD }}
        #env: 
        #  ecrtoken: ${{ secrets.ecrpassword }}

      #name: Build, tag, and push docker image to Amazon ECR Public
        #env:
        #REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        #  REGISTRY_ALIAS: my-ecr-public-registry-alias
        #  REPOSITORY: test-flypass
        #  IMAGE_TAG: ${{ github.sha }}
        #run: |
        
        #docker build -t public.ecr.aws/k6v1j2e7/test-flypass:1.0.0 .
        #  docker push public.ecr.aws/k6v1j2e7/test-flypass:1.0.0
          
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: public.ecr.aws/k6v1j2e7/test-flypass:1.0.0
          build-contexts: |
             project=build/libs/

   #       secrets: |
   #         export AWS_ACCESS_KEY_ID="ASIA4H7BSNKM55SHW2OY"
   #         export AWS_SECRET_ACCESS_KEY="BalYQWIsehcpdP4GLAy/xIqGiQ1zTNgx48hEI6LE"
   #         export AWS_SESSION_TOKEN="IQoJb3JpZ2luX2VjEPX//////////wEaCXVzLWVhc3QtMSJGMEQCIA1E02PPlp+85QvJrrLZzDeNWGtTvEZSWllvBoVNG3qHAiBXFmqKXEfdz8g2DCuq60mXZcjTMbk8K6CywGf7aLj1pyqOAwh9EAAaDDg0MTc0OTc4NTI0MSIM5YVdeC7ejP42Cf1PKusCJ8+8aJ+She2kOCrSq8bLrOoTM0tjMR4Xj1b+60z0Vt2mhmlRX9vNv1fLweO1ZgpBjSzBNYnhcfLuKu0lsy52Q+YmMkCEd4Qxa3JqTapaJxcBuLl7Hw586bCAJdAqkBtD3mGjjSJi+TXr+rmFC1O+o9XaBGaOcShgLrFNR0WQwYFBDsKclGRlP2XX/zCxTByDFBdpiA8I/tCEOayjyJwCU3X+cBHkULXnxCsG9oAcOafsjrHyfnyCMJ9mK+XIdyBeW8zgGd9p/xMiOukOV/LPLSKl1jqiNFwRW22jZD0Sq5LUN/5bBhf6PbOQd+RJCyC+5c8+OSp3r/Tyu48uxQyByQpGXnK/kCoiwperxiVzRP7uA72xMC3oObwc2t5TVDE4I6Om9wu7pamy3pamCyY9xyRU9ZhaCGdUbNnMBePhm+PYmiv3D/GWMazre3yjqUa7hfxWRqeVXq9QynbBaS9wvOojx+RcidWIryFIMI+HkJ8GOqcB24KJyLfepXWi/AfUCywoNKWdJr5jbr76qBms5iRs86tL78OVhM7bdiL2z5SXU8kosmv9TecHlBpZ8gMMIbrYkHIF3BxcmamtdfmfFLvAgk0qJXHs6Kcz9/9if6p/r1E5tcEzTs+Wxv0tnD4cWyUXjJZW0aVXS7wPbdIkU3ny+opRkDhN33v0Z9jl+gakPTftIIdksTNWdzkiaInNiye1D3mYzojRWIc="
  
