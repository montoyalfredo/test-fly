
name: templatetest

on:
  workflow_call:
    secrets:
      ecrpassword:
        required: false
      AWS_ACCESS_KEY:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

jobs:

  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - run: |
          echo ${{secrets.tests}}
      - name: Read variable mapping
        id: read-mapping
        run: |
          # Read the variable mapping file into an environment variable
          export VARIABLE_MAPPING=$(cat variables.json)
        working-directory: ${{ github.workspace }}
        
      - name: Replace Variables
        run: |
          replace_variables() {
              file="$1"

              # Find all variables in the file
              variables=$(grep -o -E '#{[A-Za-z0-9_]+}#' "$file")

              # Loop through each variable and replace it with the corresponding environment variable value
              for variable in $variables; do
                  # Remove the leading and trailing hash symbols
                  var_name=${variable#"#{"}
                  var_name=${var_name%"}#"}

                  # Get the environment variable value
                  var_value="${{ env.${var_name} }}"

                  if [[ -z "$var_value" ]]; then
                      # Handle the case where the environment variable is not found
                      echo "Warning: Variable '${var_name}' not found in environment variables."
                      continue
                  fi

                  # Escape special characters in the variable value
                  var_value_escaped=$(echo "$var_value" | sed 's/[\&/]/\\&/g')

                  # Replace the variable with the environment variable value
                  sed -i "s|${variable}|${var_value_escaped}|g" "$file"
              done
          }

          # Specify the directory path as the current working directory
          directory_path="$PWD"

          # Find and replace variables in all files within the directory and its subdirectories
          find "$directory_path" -type f -print0 | while IFS= read -r -d '' file; do
              replace_variables "$file"
          done
        env:
          VARIABLE_MAPPING: ${{ steps.read-mapping.outputs.VARIABLE_MAPPING }}
          
      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: test.txt
#       - name: Install GitVersion
#         uses: gittools/actions/gitversion/setup@v0.9.15
#         with:
#           versionSpec: '5.x'
#       - name: Determine Version
#         uses: gittools/actions/gitversion/execute@v0.9.15
#         with:
#           useConfigFile: true
#           configFilePath: gitversion-autoincrement.yml
        
#       - run: |
#           echo $GitVersion_MajorMinorPatch
#           echo $MajorMinorPatch
#           echo $GITHUB_RUN_ID

#       - uses: actions/setup-java@v3
#         with:
#           distribution: temurin
#           java-version: 17

#       - name: Setup Gradle
#         uses: gradle/gradle-build-action@v2

#       - name: Execute Gradle build
#         run: ./gradlew build sonar 
#           -Dsonar.organization=crisnen10 
#           -Dsonar.projectKey=crisnen10_test-fly 
#           -Dsonar.login=fbe3bb67032ec47d2e028f1f8fba1ae901986a24


#       - name: SonarQube Quality Gate check
#         id: sonarqube-quality-gate-check
#         uses: sonarsource/sonarqube-quality-gate-action@master
#         # Force to fail step after specific time.
#         timeout-minutes: 300
#         env:
#          SONAR_TOKEN: fbe3bb67032ec47d2e028f1f8fba1ae901986a24
#         with:
#           scanMetadataReportFile: build/sonar/report-task.txt

#       - name: Archive build artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: buildartifact
#           path: build
          
# #  deployment:
# #    runs-on: ubuntu-latest
# #    needs: compile
# #    environment: ecr
# #    steps:
# #      - uses: actions/checkout@v3
# #      - name: Download a single artifact
# #        uses: actions/download-artifact@v3
# #        with:
# #          name: buildartifact
# #          path: build
# #      - run: tree
# ##      - name: Login to Amazon ECR Public
# ##        id: login-ecr-public
# ##        uses: aws-actions/amazon-ecr-login@v1
# ##        with:
# ##          registry-type: public


# #      - name: Set up Docker Buildx
# #        uses: docker/setup-buildx-action@v2
# #        with:
# #          version: v0.10.0
# #      - name: Configure AWS credentials
# #        uses: aws-actions/configure-aws-credentials@v1
# #        with:
# #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
# #          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #          aws-region: us-east-1
# #
# #      - name: Login to Amazon ECR
# #        id: login-ecr-public
# #        uses: aws-actions/amazon-ecr-login@v1
# #        with:
# #          registry-type: public
# #        #- name: Login to Docker Hub
# #       #uses: docker/login-action@v2
# #       #with:
# #       #  username: AWS
# #       #  password: ${{ secrets.ECRPASSWORD }}
# #       #env: 
# #       #  ecrtoken: ${{ secrets.ecrpassword }}
# #
# #     #name: Build, tag, and push docker image to Amazon ECR Public
# #       #env:
# #       #REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
# #       #  REGISTRY_ALIAS: my-ecr-public-registry-alias
# #       #  REPOSITORY: test-flypass
# #       #  IMAGE_TAG: ${{ github.sha }}
# #       #run: |
# #       
# #       #docker build -t public.ecr.aws/k6v1j2e7/test-flypass:1.0.0 .
# #       #  docker push public.ecr.aws/k6v1j2e7/test-flypass:1.0.0
# #         
# #     - name: Build and push
# #       uses: docker/build-push-action@v4
# #       with:
# #         push: true
# #         tags: public.ecr.aws/k6v1j2e7/test-flypass:1.0.0
# #         build-contexts: |
# #            project=build/libs/
